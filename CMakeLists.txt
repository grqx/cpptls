cmake_minimum_required(VERSION 3.19)

if (NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif()

option(LIBCPPTLS_BUILD_EXAMPLES "Build examples" ON)
option(LIBCPPTLS_BUILD_STATIC "Build static library" OFF)
option(LIBCPPTLS_BUILD_SHARED "Build shared(dynamic) library" ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

project(cpptls LANGUAGES CXX)

if (CMAKE_BUILD_TYPE STREQUAL "Release")
	if (MSVC)
		# message(STATUS "Setting MSVC Linker Arguments")
		# set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /MT")
	elseif(CMAKE_COMPILER_IS_GNUCXX)
		message(STATUS "Setting Linker Arguments For ${CMAKE_CXX_COMPILER_ID}")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libstdc++ -static-libgcc")
	endif()
endif()

set(executable_srcs "examples/tls_client.cpp")

file(GLOB_RECURSE lib_srcs CONFIGURE_DEPENDS src/*.cpp include/*.h)
set(incl_dirs include)

set(OPENSSL_USE_STATIC_LIBS TRUE)
find_package(OpenSSL REQUIRED)

set(ext_libs OpenSSL::SSL OpenSSL::Crypto)

if (LIBCPPTLS_BUILD_STATIC)
	add_library(cpptls STATIC ${lib_srcs})
	target_include_directories(cpptls PUBLIC ${incl_dirs})
	target_link_libraries(cpptls PRIVATE ${ext_libs})
	target_compile_definitions(cpptls PRIVATE LIBCPPTLS_STATIC)
endif()

if (LIBCPPTLS_BUILD_SHARED)
	add_library(cpptlsDyn SHARED ${lib_srcs})
	target_include_directories(cpptlsDyn PUBLIC ${incl_dirs})
	if (LIBCPPTLS_BUILD_STATIC)  # prefer static ver
		target_link_libraries(cpptlsDyn PRIVATE cpptls)
	else()
		target_link_libraries(cpptlsDyn PRIVATE ${ext_libs})
	endif()
	target_compile_definitions(cpptlsDyn PRIVATE LIBTLS_EXPORTS)
endif()

if (LIBCPPTLS_BUILD_EXAMPLES)
	if (LIBCPPTLS_BUILD_STATIC)  # prefer static
		set(LINKED_LIB cpptls)
	elseif (LIBCPPTLS_BUILD_SHARED)
		set(LINKED_LIB cpptlsDyn ${ext_libs})
	else()
		list(APPEND executable_srcs ${lib_srcs})
		set(LINKED_LIB ${ext_libs})
	endif()
	message(STATUS "LINKED_LIB: ${LINKED_LIB}")
	if (NOT MSVC)
		add_executable(TLS_client ${executable_srcs})
		target_include_directories(TLS_client PUBLIC ${incl_dirs})
		target_link_libraries(TLS_client PRIVATE ${LINKED_LIB})
		if (NOT LIBCPPTLS_BUILD_SHARED)
			message(STATUS "Indicating static linkage of libcpptls for target TLS_client")
			target_compile_definitions(TLS_client PRIVATE LIBCPPTLS_STATIC)
		endif()
	endif()
	add_executable(test_sha "examples/test_sha.cpp")
	target_include_directories(test_sha PUBLIC ${incl_dirs})
	target_link_libraries(test_sha PRIVATE ${LINKED_LIB})
	if (LIBCPPTLS_BUILD_STATIC OR NOT LIBCPPTLS_BUILD_SHARED)
		message(STATUS "Indicating static linkage of libcpptls for target test_sha")
		target_compile_definitions(test_sha PRIVATE LIBCPPTLS_STATIC)
	endif()
endif()

